{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.initialState = initialState;\n        this.restart();\n    }\n    move(direction) {\n        if (this.status !== \"playing\") return;\n        const moveAnimations = [];\n        const mergeAnimations = [];\n        let moved = false;\n        const config = this.getMoveConfig(direction);\n        for(let i = 0; i < 4; i++){\n            const line = this.getLine(i, config);\n            const processedLine = this.processLine(line, i, config, moveAnimations, mergeAnimations);\n            if (processedLine.moved) moved = true;\n            this.setLine(i, processedLine.newLine, config);\n        }\n        if (moved) this.animateMove(moveAnimations, mergeAnimations, ()=>{\n            this.addRandomTile();\n            this.checkGameOver();\n        });\n    }\n    getMoveConfig(direction) {\n        const configs = {\n            left: {\n                extractLine: (lineIndex)=>this.board[lineIndex],\n                updateLine: (lineIndex, newLine)=>{\n                    this.board[lineIndex] = newLine;\n                },\n                getCoords: (lineIndex, pos)=>({\n                        row: lineIndex,\n                        col: pos\n                    }),\n                reverse: false,\n                startPos: 0,\n                increment: 1\n            },\n            right: {\n                extractLine: (lineIndex)=>this.board[lineIndex],\n                updateLine: (lineIndex, newLine)=>{\n                    this.board[lineIndex] = newLine;\n                },\n                getCoords: (lineIndex, pos)=>({\n                        row: lineIndex,\n                        col: pos\n                    }),\n                reverse: true,\n                startPos: 3,\n                increment: -1\n            },\n            up: {\n                extractLine: (lineIndex)=>this.board.map((row)=>row[lineIndex]),\n                updateLine: (lineIndex, newLine)=>{\n                    for(let row = 0; row < 4; row++)this.board[row][lineIndex] = newLine[row];\n                },\n                getCoords: (lineIndex, pos)=>({\n                        row: pos,\n                        col: lineIndex\n                    }),\n                reverse: false,\n                startPos: 0,\n                increment: 1\n            },\n            down: {\n                extractLine: (lineIndex)=>this.board.map((row)=>row[lineIndex]),\n                updateLine: (lineIndex, newLine)=>{\n                    for(let row = 0; row < 4; row++)this.board[row][lineIndex] = newLine[row];\n                },\n                getCoords: (lineIndex, pos)=>({\n                        row: pos,\n                        col: lineIndex\n                    }),\n                reverse: true,\n                startPos: 3,\n                increment: -1\n            }\n        };\n        return configs[direction];\n    }\n    getLine(lineIndex, config) {\n        return config.extractLine(lineIndex);\n    }\n    setLine(lineIndex, newLine, config) {\n        config.updateLine(lineIndex, newLine);\n    }\n    processLine(line, lineIndex, config, moveAnimations, mergeAnimations) {\n        const nonZeroTiles = this.getNonZeroTiles(line, config);\n        const newLine = config.reverse ? [\n            0,\n            0,\n            0,\n            0\n        ] : [];\n        let targetPos = config.startPos;\n        let moved = false;\n        for(let k = 0; k < nonZeroTiles.length; k++){\n            const current = nonZeroTiles[k];\n            const next = nonZeroTiles[k + 1];\n            if (next && current.value === next.value) {\n                const mergedValue = current.value * 2;\n                if (config.reverse) newLine[targetPos] = mergedValue;\n                else newLine.push(mergedValue);\n                this.addMoveAnimation(current, targetPos, lineIndex, config, moveAnimations);\n                this.addMoveAnimation(next, targetPos, lineIndex, config, moveAnimations);\n                mergeAnimations.push({\n                    position: config.getCoords(lineIndex, targetPos),\n                    value: mergedValue\n                });\n                this.score += mergedValue;\n                k++;\n                moved = true;\n            } else {\n                if (config.reverse) newLine[targetPos] = current.value;\n                else newLine.push(current.value);\n                if (current.from !== targetPos) {\n                    this.addMoveAnimation(current, targetPos, lineIndex, config, moveAnimations);\n                    moved = true;\n                }\n            }\n            targetPos += config.increment;\n        }\n        if (!config.reverse) while(newLine.length < 4)newLine.push(0);\n        return {\n            newLine: newLine,\n            moved: moved\n        };\n    }\n    getNonZeroTiles(line, config) {\n        const nonZeroTiles = [];\n        const positions = config.reverse ? [\n            3,\n            2,\n            1,\n            0\n        ] : [\n            0,\n            1,\n            2,\n            3\n        ];\n        for (const pos of positions)if (line[pos] !== 0) nonZeroTiles.push({\n            value: line[pos],\n            from: pos,\n            to: config.reverse ? 3 - nonZeroTiles.length : nonZeroTiles.length\n        });\n        return nonZeroTiles;\n    }\n    addMoveAnimation(tile, targetPos, lineIndex, config, moveAnimations) {\n        moveAnimations.push({\n            from: config.getCoords(lineIndex, tile.from),\n            to: config.getCoords(lineIndex, targetPos),\n            value: tile.value\n        });\n    }\n    moveLeft() {\n        this.move(\"left\");\n    }\n    moveRight() {\n        this.move(\"right\");\n    }\n    moveUp() {\n        this.move(\"up\");\n    }\n    moveDown() {\n        this.move(\"down\");\n    }\n    animateMove(moveAnimations, mergeAnimations, callback) {\n        if (moveAnimations.length === 0) {\n            callback();\n            return;\n        }\n        const animatedTiles = [];\n        moveAnimations.forEach((animation)=>{\n            const fromCell = document.querySelector(`[data-position=\"${animation.from.row}-${animation.from.col}\"]`);\n            const toCell = document.querySelector(`[data-position=\"${animation.to.row}-${animation.to.col}\"]`);\n            const animatedTile = document.createElement(\"div\");\n            animatedTile.className = `field-cell field-cell--${animation.value}`;\n            animatedTile.textContent = animation.value;\n            const fromRect = fromCell.getBoundingClientRect();\n            const gameField = document.querySelector(\".game-field\");\n            const fieldRect = gameField.getBoundingClientRect();\n            animatedTile.style.position = \"absolute\";\n            animatedTile.style.left = `${fromRect.left - fieldRect.left}px`;\n            animatedTile.style.top = `${fromRect.top - fieldRect.top}px`;\n            animatedTile.style.width = `${fromRect.width}px`;\n            animatedTile.style.height = `${fromRect.height}px`;\n            animatedTile.style.zIndex = \"10\";\n            animatedTile.style.transition = \"all 0.2s ease-in-out\";\n            gameField.style.position = \"relative\";\n            gameField.appendChild(animatedTile);\n            animatedTiles.push(animatedTile);\n            fromCell.textContent = \"\";\n            fromCell.className = \"field-cell\";\n            requestAnimationFrame(()=>{\n                const toRect = toCell.getBoundingClientRect();\n                animatedTile.style.left = `${toRect.left - fieldRect.left}px`;\n                animatedTile.style.top = `${toRect.top - fieldRect.top}px`;\n            });\n        });\n        setTimeout(()=>{\n            animatedTiles.forEach((tile)=>tile.remove());\n            this.updateDisplay();\n            mergeAnimations.forEach((merge)=>{\n                const cell = document.querySelector(`[data-position=\"${merge.position.row}-${merge.position.col}\"]`);\n                cell.classList.add(\"field-cell--merged\");\n                setTimeout(()=>{\n                    cell.classList.remove(\"field-cell--merged\");\n                }, 150);\n            });\n            callback();\n        }, 200);\n    }\n    updateDisplay() {\n        const state = this.getState();\n        state.forEach((row, rowIndex)=>{\n            row.forEach((value, colIndex)=>{\n                const cell = document.querySelector(`[data-position=\"${rowIndex}-${colIndex}\"]`);\n                cell.textContent = value !== 0 ? value : \"\";\n                this.updateCellClass(cell, value);\n            });\n        });\n    }\n    updateCellClass(cell, value) {\n        const hasNewClass = cell.classList.contains(\"field-cell--new\");\n        const hasMergedClass = cell.classList.contains(\"field-cell--merged\");\n        const classesToRemove = [];\n        cell.classList.forEach((className)=>{\n            if (className.startsWith(\"field-cell--\") && !className.includes(\"new\") && !className.includes(\"merged\")) classesToRemove.push(className);\n        });\n        classesToRemove.forEach((className)=>cell.classList.remove(className));\n        if (value !== 0) cell.classList.add(`field-cell--${value}`);\n        if (hasNewClass) cell.classList.add(\"field-cell--new\");\n        if (hasMergedClass) cell.classList.add(\"field-cell--merged\");\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.board.map((row)=>[\n                ...row\n            ]);\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        this.status = \"playing\";\n        this.addRandomTile();\n        this.addRandomTile();\n    }\n    restart() {\n        this.board = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    checkGameOver() {\n        if (this.board.some((row)=>row.includes(2048))) this.status = \"win\";\n        else if (!this.canMove()) this.status = \"lose\";\n    }\n    canMove() {\n        for(let i = 0; i < 4; i++)for(let j = 0; j < 4; j++){\n            if (this.board[i][j] === 0) return true;\n            if (j < 3 && this.board[i][j] === this.board[i][j + 1]) return true;\n            if (i < 3 && this.board[i][j] === this.board[i + 1][j]) return true;\n        }\n        return false;\n    }\n    addRandomTile() {\n        const emptyCells = [];\n        this.board.forEach((row, rowIndex)=>{\n            row.forEach((value, colIndex)=>{\n                if (value === 0) emptyCells.push({\n                    rowIndex: rowIndex,\n                    colIndex: colIndex\n                });\n            });\n        });\n        if (emptyCells.length > 0) {\n            const randomIndex = Math.floor(Math.random() * emptyCells.length);\n            const { rowIndex: rowIndex, colIndex: colIndex } = emptyCells[randomIndex];\n            this.board[rowIndex][colIndex] = Math.random() < 0.9 ? 2 : 4;\n            const cell = document.querySelector(`[data-position=\"${rowIndex}-${colIndex}\"]`);\n            cell.textContent = this.board[rowIndex][colIndex];\n            this.updateCellClass(cell, this.board[rowIndex][colIndex]);\n            requestAnimationFrame(()=>{\n                cell.classList.add(\"field-cell--new\");\n                setTimeout(()=>{\n                    cell.classList.remove(\"field-cell--new\");\n                }, 300);\n            });\n        }\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$scoreElement = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$startButton = document.getElementById(\"startButton\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$messagePlaying = document.querySelector(\".message-playing\");\nfunction $09e991522ca7e64e$var$updateBoard() {\n    $09e991522ca7e64e$var$game.updateDisplay();\n}\nfunction $09e991522ca7e64e$var$updateScore() {\n    $09e991522ca7e64e$var$scoreElement.textContent = $09e991522ca7e64e$var$game.getScore();\n}\nfunction $09e991522ca7e64e$var$updateMessages() {\n    const status = $09e991522ca7e64e$var$game.getStatus();\n    if (status === \"win\") {\n        $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messagePlaying.classList.add(\"hidden\");\n    } else if (status === \"lose\") {\n        $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messagePlaying.classList.add(\"hidden\");\n    } else if (status === \"playing\") {\n        $09e991522ca7e64e$var$messagePlaying.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n    } else {\n        $09e991522ca7e64e$var$messageStart.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messagePlaying.classList.add(\"hidden\");\n    }\n}\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$startButton.classList.contains(\"start\")) {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$updateBoard();\n        $09e991522ca7e64e$var$updateMessages();\n        $09e991522ca7e64e$var$startButton.classList.remove(\"start\");\n        $09e991522ca7e64e$var$startButton.classList.add(\"restart\");\n        $09e991522ca7e64e$var$startButton.textContent = \"Restart\";\n    } else {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$updateBoard();\n        $09e991522ca7e64e$var$updateScore();\n        $09e991522ca7e64e$var$updateMessages();\n        $09e991522ca7e64e$var$startButton.classList.remove(\"restart\");\n        $09e991522ca7e64e$var$startButton.classList.add(\"start\");\n        $09e991522ca7e64e$var$startButton.textContent = \"Start\";\n    }\n});\nlet $09e991522ca7e64e$var$isAnimating = false;\nwindow.addEventListener(\"keydown\", (event)=>{\n    if ($09e991522ca7e64e$var$isAnimating) return;\n    switch(event.key){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$isAnimating = true;\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$isAnimating = true;\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$isAnimating = true;\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$isAnimating = true;\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        default:\n            return;\n    }\n    setTimeout(()=>{\n        $09e991522ca7e64e$var$updateScore();\n        $09e991522ca7e64e$var$updateMessages();\n        $09e991522ca7e64e$var$isAnimating = false;\n    }, 350);\n});\n\n\n//# sourceMappingURL=index.62f6c2f6.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\nconst scoreElement = document.querySelector('.game-score');\nconst startButton = document.getElementById('startButton');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst messagePlaying = document.querySelector('.message-playing');\n\nfunction updateBoard() {\n  game.updateDisplay();\n}\n\nfunction updateScore() {\n  scoreElement.textContent = game.getScore();\n}\n\nfunction updateMessages() {\n  const status = game.getStatus();\n\n  if (status === 'win') {\n    messageWin.classList.remove('hidden');\n    messageLose.classList.add('hidden');\n    messageStart.classList.add('hidden');\n    messagePlaying.classList.add('hidden');\n  } else if (status === 'lose') {\n    messageLose.classList.remove('hidden');\n    messageWin.classList.add('hidden');\n    messageStart.classList.add('hidden');\n    messagePlaying.classList.add('hidden');\n  } else if (status === 'playing') {\n    messagePlaying.classList.remove('hidden');\n    messageStart.classList.add('hidden');\n    messageWin.classList.add('hidden');\n    messageLose.classList.add('hidden');\n  } else {\n    messageStart.classList.remove('hidden');\n    messageWin.classList.add('hidden');\n    messageLose.classList.add('hidden');\n    messagePlaying.classList.add('hidden');\n  }\n}\n\nstartButton.addEventListener('click', () => {\n  if (startButton.classList.contains('start')) {\n    game.start();\n    updateBoard();\n    updateMessages();\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n    startButton.textContent = 'Restart';\n  } else {\n    game.restart();\n    updateBoard();\n    updateScore();\n    updateMessages();\n    startButton.classList.remove('restart');\n    startButton.classList.add('start');\n    startButton.textContent = 'Start';\n  }\n});\n\nlet isAnimating = false;\n\nwindow.addEventListener('keydown', (event) => {\n  if (isAnimating) {\n    return;\n  }\n\n  switch (event.key) {\n    case 'ArrowLeft':\n      isAnimating = true;\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      isAnimating = true;\n      game.moveRight();\n      break;\n    case 'ArrowUp':\n      isAnimating = true;\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      isAnimating = true;\n      game.moveDown();\n      break;\n    default:\n      return;\n  }\n\n  setTimeout(() => {\n    updateScore();\n    updateMessages();\n    isAnimating = false;\n  }, 350);\n});\n","'use strict';\n\nclass Game {\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.initialState = initialState;\n    this.restart();\n  }\n\n  move(direction) {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const moveAnimations = [];\n    const mergeAnimations = [];\n    let moved = false;\n\n    const config = this.getMoveConfig(direction);\n\n    for (let i = 0; i < 4; i++) {\n      const line = this.getLine(i, config);\n      const processedLine\n        = this.processLine(line, i, config, moveAnimations, mergeAnimations);\n\n      if (processedLine.moved) {\n        moved = true;\n      }\n\n      this.setLine(i, processedLine.newLine, config);\n    }\n\n    if (moved) {\n      this.animateMove(moveAnimations, mergeAnimations, () => {\n        this.addRandomTile();\n        this.checkGameOver();\n      });\n    }\n  }\n\n  getMoveConfig(direction) {\n    const configs = {\n      left: {\n        extractLine: (lineIndex) => this.board[lineIndex],\n        updateLine: (lineIndex, newLine) => {\n          this.board[lineIndex] = newLine;\n        },\n        getCoords: (lineIndex, pos) => ({\n          row: lineIndex, col: pos,\n        }),\n        reverse: false,\n        startPos: 0,\n        increment: 1,\n      },\n      right: {\n        extractLine: (lineIndex) => this.board[lineIndex],\n        updateLine: (lineIndex, newLine) => {\n          this.board[lineIndex] = newLine;\n        },\n        getCoords: (lineIndex, pos) => ({\n          row: lineIndex, col: pos,\n        }),\n        reverse: true,\n        startPos: 3,\n        increment: -1,\n      },\n      up: {\n        extractLine: (lineIndex) => this.board.map(row => row[lineIndex]),\n        updateLine: (lineIndex, newLine) => {\n          for (let row = 0; row < 4; row++) {\n            this.board[row][lineIndex] = newLine[row];\n          }\n        },\n        getCoords: (lineIndex, pos) => ({\n          row: pos, col: lineIndex,\n        }),\n        reverse: false,\n        startPos: 0,\n        increment: 1,\n      },\n      down: {\n        extractLine: (lineIndex) => this.board.map(row => row[lineIndex]),\n        updateLine: (lineIndex, newLine) => {\n          for (let row = 0; row < 4; row++) {\n            this.board[row][lineIndex] = newLine[row];\n          }\n        },\n        getCoords: (lineIndex, pos) => ({\n          row: pos, col: lineIndex,\n        }),\n        reverse: true,\n        startPos: 3,\n        increment: -1,\n      },\n    };\n\n    return configs[direction];\n  }\n\n  getLine(lineIndex, config) {\n    return config.extractLine(lineIndex);\n  }\n\n  setLine(lineIndex, newLine, config) {\n    config.updateLine(lineIndex, newLine);\n  }\n\n  processLine(line, lineIndex, config, moveAnimations, mergeAnimations) {\n    const nonZeroTiles = this.getNonZeroTiles(line, config);\n    const newLine = config.reverse ? [0, 0, 0, 0] : [];\n    let targetPos = config.startPos;\n    let moved = false;\n\n    for (let k = 0; k < nonZeroTiles.length; k++) {\n      const current = nonZeroTiles[k];\n      const next = nonZeroTiles[k + 1];\n\n      if (next && current.value === next.value) {\n        const mergedValue = current.value * 2;\n\n        if (config.reverse) {\n          newLine[targetPos] = mergedValue;\n        } else {\n          newLine.push(mergedValue);\n        }\n\n        this.addMoveAnimation(\n          current, targetPos, lineIndex, config, moveAnimations);\n\n        this.addMoveAnimation(\n          next, targetPos, lineIndex, config, moveAnimations);\n\n        mergeAnimations.push({\n          position: config.getCoords(lineIndex, targetPos),\n          value: mergedValue,\n        });\n\n        this.score += mergedValue;\n        k++;\n        moved = true;\n      } else {\n        if (config.reverse) {\n          newLine[targetPos] = current.value;\n        } else {\n          newLine.push(current.value);\n        }\n\n        if (current.from !== targetPos) {\n          this.addMoveAnimation(\n            current, targetPos, lineIndex, config, moveAnimations);\n          moved = true;\n        }\n      }\n\n      targetPos += config.increment;\n    }\n\n    if (!config.reverse) {\n      while (newLine.length < 4) {\n        newLine.push(0);\n      }\n    }\n\n    return {\n      newLine, moved,\n    };\n  }\n\n  getNonZeroTiles(line, config) {\n    const nonZeroTiles = [];\n    const positions = config.reverse ? [3, 2, 1, 0] : [0, 1, 2, 3];\n\n    for (const pos of positions) {\n      if (line[pos] !== 0) {\n        nonZeroTiles.push({\n          value: line[pos],\n          from: pos,\n          to: config.reverse ? 3 - nonZeroTiles.length : nonZeroTiles.length,\n        });\n      }\n    }\n\n    return nonZeroTiles;\n  }\n\n  addMoveAnimation(tile, targetPos, lineIndex, config, moveAnimations) {\n    moveAnimations.push({\n      from: config.getCoords(lineIndex, tile.from),\n      to: config.getCoords(lineIndex, targetPos),\n      value: tile.value,\n    });\n  }\n\n  moveLeft() {\n    this.move('left');\n  }\n\n  moveRight() {\n    this.move('right');\n  }\n\n  moveUp() {\n    this.move('up');\n  }\n\n  moveDown() {\n    this.move('down');\n  }\n\n  animateMove(moveAnimations, mergeAnimations, callback) {\n    if (moveAnimations.length === 0) {\n      callback();\n\n      return;\n    }\n\n    const animatedTiles = [];\n\n    moveAnimations.forEach(animation => {\n      const fromCell = document.querySelector(\n        `[data-position=\"${animation.from.row}-${animation.from.col}\"]`,\n      );\n      const toCell = document.querySelector(\n        `[data-position=\"${animation.to.row}-${animation.to.col}\"]`,\n      );\n\n      const animatedTile = document.createElement('div');\n\n      animatedTile.className\n        = `field-cell field-cell--${animation.value}`;\n      animatedTile.textContent = animation.value;\n\n      const fromRect = fromCell.getBoundingClientRect();\n      const gameField = document.querySelector('.game-field');\n      const fieldRect = gameField.getBoundingClientRect();\n\n      animatedTile.style.position = 'absolute';\n      animatedTile.style.left = `${fromRect.left - fieldRect.left}px`;\n      animatedTile.style.top = `${fromRect.top - fieldRect.top}px`;\n      animatedTile.style.width = `${fromRect.width}px`;\n      animatedTile.style.height = `${fromRect.height}px`;\n      animatedTile.style.zIndex = '10';\n      animatedTile.style.transition = 'all 0.2s ease-in-out';\n\n      gameField.style.position = 'relative';\n      gameField.appendChild(animatedTile);\n      animatedTiles.push(animatedTile);\n\n      fromCell.textContent = '';\n      fromCell.className = 'field-cell';\n\n      requestAnimationFrame(() => {\n        const toRect = toCell.getBoundingClientRect();\n\n        animatedTile.style.left = `${toRect.left - fieldRect.left}px`;\n        animatedTile.style.top = `${toRect.top - fieldRect.top}px`;\n      });\n    });\n\n    setTimeout(() => {\n      animatedTiles.forEach(tile => tile.remove());\n\n      this.updateDisplay();\n\n      mergeAnimations.forEach(merge => {\n        const cell = document.querySelector(\n          `[data-position=\"${merge.position.row}-${merge.position.col}\"]`,\n        );\n\n        cell.classList.add('field-cell--merged');\n\n        setTimeout(() => {\n          cell.classList.remove('field-cell--merged');\n        }, 150);\n      });\n\n      callback();\n    }, 200);\n  }\n\n  updateDisplay() {\n    const state = this.getState();\n\n    state.forEach((row, rowIndex) => {\n      row.forEach((value, colIndex) => {\n        const cell = document.querySelector(\n          `[data-position=\"${rowIndex}-${colIndex}\"]`,\n        );\n\n        cell.textContent = value !== 0 ? value : '';\n\n        this.updateCellClass(cell, value);\n      });\n    });\n  }\n\n  updateCellClass(cell, value) {\n    const hasNewClass = cell.classList.contains('field-cell--new');\n    const hasMergedClass = cell.classList.contains('field-cell--merged');\n\n    const classesToRemove = [];\n\n    cell.classList.forEach(className => {\n      if (className.startsWith('field-cell--')\n          && !className.includes('new')\n          && !className.includes('merged')) {\n        classesToRemove.push(className);\n      }\n    });\n    classesToRemove.forEach(className => cell.classList.remove(className));\n\n    if (value !== 0) {\n      cell.classList.add(`field-cell--${value}`);\n    }\n\n    if (hasNewClass) {\n      cell.classList.add('field-cell--new');\n    }\n\n    if (hasMergedClass) {\n      cell.classList.add('field-cell--merged');\n    }\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.board.map((row) => [...row]);\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.status = 'playing';\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  restart() {\n    this.board = this.initialState.map((row) => [...row]);\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  checkGameOver() {\n    if (this.board.some((row) => row.includes(2048))) {\n      this.status = 'win';\n    } else if (!this.canMove()) {\n      this.status = 'lose';\n    }\n  }\n\n  canMove() {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (this.board[i][j] === 0) {\n          return true;\n        }\n\n        if (j < 3 && this.board[i][j] === this.board[i][j + 1]) {\n          return true;\n        }\n\n        if (i < 3 && this.board[i][j] === this.board[i + 1][j]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    this.board.forEach((row, rowIndex) => {\n      row.forEach((value, colIndex) => {\n        if (value === 0) {\n          emptyCells.push({\n            rowIndex,\n            colIndex,\n          });\n        }\n      });\n    });\n\n    if (emptyCells.length > 0) {\n      const randomIndex = Math.floor(Math.random() * emptyCells.length);\n      const { rowIndex, colIndex } = emptyCells[randomIndex];\n\n      this.board[rowIndex][colIndex] = Math.random() < 0.9 ? 2 : 4;\n\n      const cell = document.querySelector(\n        `[data-position=\"${rowIndex}-${colIndex}\"]`,\n      );\n\n      cell.textContent = this.board[rowIndex][colIndex];\n      this.updateCellClass(cell, this.board[rowIndex][colIndex]);\n\n      requestAnimationFrame(() => {\n        cell.classList.add('field-cell--new');\n\n        setTimeout(() => {\n          cell.classList.remove('field-cell--new');\n        }, 300);\n      });\n    }\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","restart","move","direction","status","moveAnimations","mergeAnimations","moved","config","getMoveConfig","i","line","getLine","processedLine","processLine","setLine","newLine","animateMove","addRandomTile","checkGameOver","configs","left","extractLine","lineIndex","board","updateLine","getCoords","pos","row","col","reverse","startPos","increment","right","up","map","down","nonZeroTiles","getNonZeroTiles","targetPos","k","length","current","next","value","mergedValue","push","addMoveAnimation","position","score","from","to","tile","moveLeft","moveRight","moveUp","moveDown","callback","animatedTiles","forEach","animation","fromCell","document","querySelector","toCell","animatedTile","createElement","className","textContent","fromRect","getBoundingClientRect","gameField","fieldRect","style","top","width","height","zIndex","transition","appendChild","requestAnimationFrame","toRect","setTimeout","remove","updateDisplay","merge","cell","classList","add","state","getState","rowIndex","colIndex","updateCellClass","hasNewClass","contains","hasMergedClass","classesToRemove","startsWith","includes","getScore","getStatus","start","some","canMove","j","emptyCells","randomIndex","Math","floor","random","$09e991522ca7e64e$var$scoreElement","$09e991522ca7e64e$var$startButton","getElementById","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$messagePlaying","$09e991522ca7e64e$var$updateBoard","$09e991522ca7e64e$var$updateScore","$09e991522ca7e64e$var$updateMessages","addEventListener","$09e991522ca7e64e$var$isAnimating","window","event","key"],"version":3,"file":"index.62f6c2f6.js.map"}